p2<-ggplot(linModel, aes(qqnorm(.stdresid)[[1]], .stdresid))+geom_point(na.rm = TRUE)
# p2<-p2+ggtitle("Normal Q-Q")+theme_bw()
p2
p2<-p2+geom_abline(aes(qqline(.stdresid)))+xlab("Theoretical Quantiles")+ylab("Standardized Residuals")
# p2<-p2+ggtitle("Normal Q-Q")+theme_bw()
p2
p2<-ggplot(linModel, aes(qqnorm(.stdresid)[[1]], .stdresid))+geom_point(na.rm = TRUE)
p2<-p2+xlab("Theoretical Quantiles")+ylab("Standardized Residuals")
# p2<-p2+ggtitle("Normal Q-Q")+theme_bw()
p2
p2<-p2+ggtitle("Normal Q-Q")+theme_minimal()
p2
p2<-ggplot(linModel, aes(qqnorm(.stdresid)[[1]], .stdresid))+geom_point(na.rm = TRUE)
p2<-p2+xlab("Theoretical Quantiles")+ylab("Standardized Residuals")
p2<-p2+ggtitle("Normal Q-Q")+theme_minimal()
p2
p2<-ggplot(linModel, aes(qqnorm(.stdresid)[[1]], .stdresid))
p2 <- p2 + geom_point(na.rm = TRUE)
p2
p2<-p2+xlab("Theoretical Quantiles")+ylab("Standardized Residuals")
p2<-p2+ggtitle("Normal Q-Q")+theme_minimal()
p2
p2<-ggplot(linModel, aes(qqnorm(.stdresid)[[1]], .stdresid))
p2 <- p2 + geom_point(na.rm = TRUE)
p2<-p2+xlab("Theoretical Quantiles")+ylab("Standardized Residuals")
p2
?geom_abline
linModel
?qplot
?qqnorm
p2<-ggplot(model, aes(qqnorm(.stdresid)[[1]], .stdresid))+geom_point(na.rm = TRUE)
p2<-ggplot(linModel, aes(qqnorm(.stdresid)[[1]], .stdresid))+geom_point(na.rm = TRUE)
p2
p2<-ggplot(linModel, aes(qqnorm(.stdresid)[[1]], .stdresid))+geom_point(na.rm = TRUE)
p2<-p2+ qqline(.stdresid)
p2<-ggplot(linModel, aes(qqnorm(.stdresid)[[1]], .stdresid))+geom_point(na.rm = TRUE)
p2<-p2+ qqline(aes(.stdresid))
p2<-p2+ qqline(.stdresid)
p2<-ggplot(model, aes(qqnorm(.stdresid)[[1]], .stdresid))+geom_point(na.rm = TRUE)
p2<-p2+geom_abline(aes(qqline(.stdresid)))+xlab("Theoretical Quantiles")+ylab("Standardized Residuals")
p2<-p2+ggtitle("Normal Q-Q")+theme_bw()
p2
p2<-ggplot(model, aes(qqnorm(.stdresid)[[1]], .stdresid))+geom_point(na.rm = TRUE)
p2<-p2+geom_abline(aes(qqline(.stdresid)))+xlab("Theoretical Quantiles")+ylab("Standardized Residuals")
p2<-p2+ggtitle("Normal Q-Q")+theme_minimal()
p2
p2
p2<-ggplot(model, aes(qqnorm(.stdresid)[[1]], .stdresid))+geom_point(na.rm = TRUE)
p2<-ggplot(linModel, aes(qqnorm(.stdresid)[[1]], .stdresid))+geom_point(na.rm = TRUE)
p2<-p2+geom_abline(aes(qqline(.stdresid)))+xlab("Theoretical Quantiles")+ylab("Standardized Residuals")
p2<-p2+ggtitle("Normal Q-Q")+theme_minimal()
p2
p2<-ggplot(linModel, aes(qqnorm(.stdresid)[[1]], .stdresid))+geom_point(na.rm = TRUE)
# p2<-p2+geom_abline(aes(qqline(.stdresid)))+xlab("Theoretical Quantiles")+ylab("Standardized Residuals")
# p2<-p2+ggtitle("Normal Q-Q")+theme_minimal()
p2
View(linModel)
# p2<-p2+geom_abline(aes(qqline(.stdresid)))+xlab("Theoretical Quantiles")+ylab("Standardized Residuals")
# p2<-p2+ggtitle("Normal Q-Q")+theme_minimal()
p2 + geom_abline(intercept = 0, slope = qqline(.stdresid))
View(linModel)
p2 + geom_abline(intercept = 0, slope = 1)
ggplot(linModel)
q<-ggplot(linModel)
q<-ggplot(linModel, aes(qqnorm(.stdresid)[[1]], .stdresid))+geom_point(na.rm = TRUE)
q <- q+ geom_qq( aes(sample = rnorm(.stdresid)))
q
q<-ggplot(linModel, aes(qqnorm(.stdresid)[[1]], .stdresid))
q <- q+ geom_qq( aes(sample = rnorm(.stdresid)))
q
p2<-ggplot(linModel, aes(qqnorm(.stdresid)[[1]], .stdresid))+geom_point(na.rm = TRUE)
p2 + geom_abline(intercept = 0, slope = 1)
?qqnorm
ggQQ <- function(LM) # argument: a linear model
{
y <- quantile(LM$resid[!is.na(LM$resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(LM, aes(sample=.resid)) +
stat_qq(alpha = 0.5) +
geom_abline(slope = slope, intercept = int, color="blue")
return(p)
}
ggQQ(linModel)
qqFunc <- function(model) # argument: a linear model
{
y <- quantile(model$resid[!is.na(model$resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(model, aes(sample=.resid)) +
stat_qq(alpha = 0.5) +
geom_abline(slope = slope, intercept = int, color="blue")
return(p)
}
qqFunc(linModel)
?stat_qq
qqFunc <- function(model) # argument: a linear model
{
y <- quantile(model$resid[!is.na(model$resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(model, aes(sample=.resid)) +
stat_qq(alpha = 0.5) +
geom_abline(slope = slope, intercept = int, color="darkslategrey") +
scale_color_manual(values = wes_palette("FantasticFox1"))
return(p)
}
qqFunc(linModel)
{
y <- quantile(model$resid[!is.na(model$resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(model, aes(sample=.resid)) +
stat_qq(alpha = 0.5, aes(col = factor(x))) +
geom_abline(slope = slope, intercept = int, color="darkslategrey") +
scale_color_manual(values = wes_palette("FantasticFox1"))
return(p)
}
qqFunc <- function(model) # argument: a linear model
{
y <- quantile(model$resid[!is.na(model$resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(model, aes(sample=.resid)) +
stat_qq(alpha = 0.5, aes(col = factor(x))) +
geom_abline(slope = slope, intercept = int, color="darkslategrey") +
scale_color_manual(values = wes_palette("FantasticFox1"))
return(p)
}
qqFunc(linModel)
qqFunc <- function(model) # argument: a linear model
{
y <- quantile(model$resid[!is.na(model$resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(model, aes(sample=.resid)) +
stat_qq(alpha = 0.5, aes(col = factor(model$resid))) +
geom_abline(slope = slope, intercept = int, color="darkslategrey") +
scale_color_manual(values = wes_palette("FantasticFox1"))
return(p)
}
qqFunc(linModel)
qqFunc <- function(model) # argument: a linear model
{
y <- quantile(model$resid[!is.na(model$resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(model, aes(sample=.resid)) +
stat_qq(alpha = 0.5, aes(col = factor(.resid))) +
geom_abline(slope = slope, intercept = int, color="darkslategrey") +
scale_color_manual(values = wes_palette("FantasticFox1"))
return(p)
}
qqFunc(linModel)
qqFunc <- function(model) # argument: a linear model
{
y <- quantile(model$resid[!is.na(model$resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(model, aes(sample=.resid)) +
stat_qq(alpha = 0.5, aes(col = factor(.resid))) +
geom_abline(slope = slope, intercept = int, color="darkslategrey")
return(p)
}
qqFunc(linModel)
qqFunc <- function(model) # argument: a linear model
{
y <- quantile(model$resid[!is.na(model$resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(model, aes(sample=.resid)) +
stat_qq(alpha = 0.5, aes(col = factor(.resid)), show.legend = F) +
geom_abline(slope = slope, intercept = int, color="darkslategrey")
return(p)
}
qqFunc(linModel)
qqFunc <- function(model) # argument: a linear model
{
y <- quantile(model$resid[!is.na(model$resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(model, aes(sample=.resid)) +
stat_qq(alpha = 0.5) +
geom_abline(slope = slope, intercept = int, color="darkslategrey")
return(p)
}
qqFunc(linModel)
qqFunc <- function(model) # argument: a linear model
{
y <- quantile(model$resid[!is.na(model$resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(model, aes(sample=.resid)) +
stat_qq(alpha = 0.5, color = "darkslategrey") +
geom_abline(slope = slope, intercept = int, color="blue")
return(p)
}
qqFunc(linModel)
wes_palette("FantasticFox1", 3)
wes_palette("FantasticFox1", 5)
str(wes_palette)
wes_palettes
qqFunc <- function(model) # argument: a linear model
{
y <- quantile(model$resid[!is.na(model$resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(model, aes(sample=.resid)) +
stat_qq(alpha = 0.5, color = "#46ACC8") +
geom_abline(slope = slope, intercept = int, color="#E58601")
return(p)
}
qqFunc(linModel)
qqFunc <- function(model) # argument: a linear model
{
y <- quantile(model$resid[!is.na(model$resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(model, aes(sample=.resid)) +
stat_qq( color = "#46ACC8") +
geom_abline(slope = slope, intercept = int, color="#E58601", alpha = .05)
return(p)
}
qqFunc(linModel)
qqFunc <- function(model) # argument: a linear model
{
y <- quantile(model$resid[!is.na(model$resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(model, aes(sample=.resid)) +
stat_qq( color = "#46ACC8") +
geom_abline(slope = slope, intercept = int, color="#E58601", alpha = .5)
return(p)
}
qqFunc(linModel)
qqFunc <- function(model) # argument: a linear model
{
y <- quantile(model$resid[!is.na(model$resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(model, aes(sample=.resid)) +
stat_qq( color = "#46ACC8") +
geom_abline(slope = slope, intercept = int, color="#E58601", alpha = .75)
return(p)
}
qqFunc(linModel)
qqFunc <- function(model) # argument: a linear model
{
y <- quantile(model$resid[!is.na(model$resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(model, aes(sample=.resid)) +
stat_qq( color = "#46ACC8") +
geom_abline(slope = slope, intercept = int, color="#E58601", alpha = .75) +
xlab("Fitted values") + ylab("Residuals") + ggtitle("Residual vs Fitted Plot") +
theme_minimal()
return(p)
}
qqFunc(linModel)
qqFunc <- function(model) {
y <- quantile(model$resid[!is.na(model$resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(model, aes(sample=.resid)) +
stat_qq( color = "#46ACC8") +
geom_abline(slope = slope, intercept = int, color="#E58601", alpha = .75) +
xlab("Fitted values") + ylab("Residuals") + ggtitle("Residual vs Fitted Plot") +
theme_minimal()
return(p)
}
myPlots <- function(model, expData, treatment, response, ExpLabel, respLabel, Exper ) {
p1 <- residFunc(model)
p2 <- BoxPlotFunc( expData, treatment, response, ExpLabel, respLabel )
p3 <- qqFunc(model)
gridPlot <- grid.arrange(p2, p1, p3, nrow = 1, top = Exper)
return(gridPlot)
}
myPlots(linModel, resourceDat, resourceDat$treatmentCat, resourceDat$focalFlowerHeight_cm, "Flower Height By Treatment", "Focal Flower Height (cm)", "Resource Experiment: Focal Flower Height")
qqFunc <- function(model) {
y <- quantile(model$resid[!is.na(model$resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(model, aes(sample=.resid)) +
stat_qq( color = "#46ACC8") +
geom_abline(slope = slope, intercept = int, color="#E58601", alpha = .75) +
xlab("Theoretical Quantiles")+ylab("Standardized Residuals") + ggtitle("Normal Q-Q")
theme_minimal()
return(p)
}
myPlots(linModel, resourceDat, resourceDat$treatmentCat, resourceDat$focalFlowerHeight_cm, "Flower Height By Treatment", "Focal Flower Height (cm)", "Resource Experiment: Focal Flower Height")
myPlots <- function(model, expData, treatment, response, ExpLabel, respLabel, Exper ) {
p1 <- residFunc(model)
p2 <- BoxPlotFunc( expData, treatment, response, ExpLabel, respLabel )
p3 <- qqFunc(model)
gridPlot <- grid.arrange(p2, p1, p3, nrow = 3, top = Exper)
return(gridPlot)
}
myPlots(linModel, resourceDat, resourceDat$treatmentCat, resourceDat$focalFlowerHeight_cm, "Flower Height By Treatment", "Focal Flower Height (cm)", "Resource Experiment: Focal Flower Height")
?grid.arrange
myPlots <- function(model, expData, treatment, response, ExpLabel, respLabel, Exper ) {
p1 <- residFunc(model)
p2 <- BoxPlotFunc( expData, treatment, response, ExpLabel, respLabel )
p3 <- qqFunc(model)
gridPlot <- grid.arrange(p2, p1, p3, nrow = 2, top = Exper)
return(gridPlot)
}
myPlots(linModel, resourceDat, resourceDat$treatmentCat, resourceDat$focalFlowerHeight_cm, "Flower Height By Treatment", "Focal Flower Height (cm)", "Resource Experiment: Focal Flower Height")
p4<-ggplot(linModel, aes(seq_along(.cooksd), .cooksd))+geom_bar(stat="identity", position="identity")
p4<-p4+xlab("Obs. Number")+ylab("Cook's distance")
p4<-p4+ggtitle("Cook's distance")+theme_bw()
p4
?geom_bar
p4<-ggplot(linModel, aes(seq_along(.cooksd), .cooksd))+geom_bar(stat="identity", position="identity", aes( fill = .cooksd))
p4<-p4+xlab("Obs. Number")+ylab("Cook's distance")
p4<-p4+ggtitle("Cook's distance")+theme_bw()
p4
p4<-ggplot(linModel, aes(seq_along(.cooksd), .cooksd))+geom_bar(stat="identity", position="identity", aes( fill = .cooksd), show.legend = F)
p4<-p4+xlab("Obs. Number")+ylab("Cook's distance")
p4<-p4+ggtitle("Cook's distance")+theme_bw()
p4
p4<-ggplot(linModel, aes(seq_along(.cooksd), .cooksd))+geom_bar(stat="identity", position="identity", aes( fill = .cooksd), show.legend = F)
p4<-p4+xlab("Obs. Number")+ylab("Cook's distance")
p4<-p4+ggtitle("Cook's distance")+theme_bw() + scale_color_manual(values = wes_palette("FantasticFox1"))
p4
p4<-ggplot(linModel, aes(seq_along(.cooksd), .cooksd))+geom_bar(stat="identity", position="identity", aes( fill = .cooksd, col = factor(.cooksd)), show.legend = F)
p4<-p4+xlab("Obs. Number")+ylab("Cook's distance")
p4<-p4+ggtitle("Cook's distance")+theme_bw() + scale_color_manual(values = wes_palette("FantasticFox1"))
p4
p4<-ggplot(linModel, aes(seq_along(.cooksd), .cooksd))+geom_bar(stat="identity", position="identity", aes( fill = .cooksd, col = factor(.cooksd)), show.legend = F)
p4<-p4+xlab("Obs. Number")+ylab("Cook's distance")
p4<-p4+ggtitle("Cook's distance")+theme_bw()
p4
p4<-ggplot(linModel, aes(seq_along(.cooksd), .cooksd))+geom_bar(stat="identity", position="identity")
p4<-p4+xlab("Obs. Number")+ylab("Cook's distance")
p4<-p4+ggtitle("Cook's distance")+theme_bw()
p4
p4<-ggplot(linModel, aes(seq_along(.cooksd), .cooksd))+geom_bar(stat="identity", position="identity", color = "#46ACC8")
p4<-p4+xlab("Obs. Number")+ylab("Cook's distance")
p4<-p4+ggtitle("Cook's distance")+theme_bw()
p4
p4<-ggplot(linModel, aes(seq_along(.cooksd), .cooksd))+geom_bar(stat="identity", position="identity", aes(fill = "#46ACC8"), color = "#46ACC8")
p4<-p4+xlab("Obs. Number")+ylab("Cook's distance")
p4<-p4+ggtitle("Cook's distance")+theme_bw()
p4
p4<-ggplot(linModel, aes(seq_along(.cooksd), .cooksd))+geom_bar(stat="identity", position="identity", aes(fill = "#E58601"), color = "#E58601", show.legend = F)
p4<-p4+xlab("Obs. Number")+ylab("Cook's distance")
p4<-p4+ggtitle("Cook's distance")+theme_bw()
p4
p4<-ggplot(linModel, aes(seq_along(.cooksd), .cooksd))+geom_bar(stat="identity", position="identity", aes(fill = "#E58601"), show.legend = F)
p4<-p4+xlab("Obs. Number")+ylab("Cook's distance")
p4<-p4+ggtitle("Cook's distance")+theme_bw()
p4
p4<-ggplot(linModel, aes(seq_along(.cooksd), .cooksd))+geom_bar(stat="identity", position="identity", aes(fill = "#46ACC8"), show.legend = F)
p4<-p4+xlab("Obs. Number")+ylab("Cook's distance")
p4<-p4+ggtitle("Cook's distance")+theme_bw()
p4
p4
cooksFunc <- function(model) {
p4<-ggplot(model, aes(seq_along(.cooksd), .cooksd))+geom_bar(stat="identity", position="identity", aes(fill = "#46ACC8"), show.legend = F)
p4<-p4+xlab("Obs. Number")+ylab("Cook's distance")
p4<-p4+ggtitle("Cook's distance")+theme_bw()
return(p4)
}
cooksFunc(linModel)
cooksFunc <- function(model) {
p4<-ggplot(model, aes(seq_along(.cooksd), .cooksd))+geom_bar(stat="identity", position="identity", aes(fill = "#46ACC8"), show.legend = F)
p4<-p4+xlab("Obs. Number")+ylab("Cook's distance")
p4<-p4+ggtitle("Cook's distance")+theme_minimal()
return(p4)
}
cooksFunc(linModel)
cooksFunc <- function(model) {
p4<-ggplot(model, aes(seq_along(.cooksd), .cooksd))+geom_bar(stat="identity", position="identity", aes(fill = "#E58601"), show.legend = F)
p4<-p4+xlab("Obs. Number")+ylab("Cook's distance")
p4<-p4+ggtitle("Cook's distance")+theme_minimal()
return(p4)
}
cooksFunc(linModel)
cooksFunc <- function(model) {
p4<-ggplot(model, aes(seq_along(.cooksd), .cooksd))+geom_bar(stat="identity", position="identity", aes(fill = "darkslategrey"), show.legend = F)
p4<-p4+xlab("Obs. Number")+ylab("Cook's distance")
p4<-p4+ggtitle("Cook's distance")+theme_minimal()
return(p4)
}
cooksFunc(linModel)
myPlots <- function(model, expData, treatment, response, ExpLabel, respLabel, Exper ) {
p1 <- residFunc(model)
p2 <- BoxPlotFunc( expData, treatment, response, ExpLabel, respLabel )
p3 <- qqFunc(model)
p4 <- cooksFunc(model)
gridPlot <- grid.arrange(p2, p1, p3, p4, nrow = 2, top = Exper)
return(gridPlot)
}
#Setting X Axis orders for Boxplots
levelOrder <- c("Control", "Structure", "Low", "Medium", "High")
myPlots(linModel, resourceDat, resourceDat$treatmentCat, resourceDat$focalFlowerHeight_cm, "Flower Height By Treatment", "Focal Flower Height (cm)", "Resource Experiment: Focal Flower Height")
qqFunc <- function(model) {
y <- quantile(model$resid[!is.na(model$resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(model, aes(sample=.resid)) +
stat_qq( color = "#46ACC8") +
geom_abline(slope = slope, intercept = int, color="#E58601", alpha = .75) +
xlab("Theoretical Quantiles")+ylab("Standardized Residuals") + ggtitle("Normal Q-Q") +
theme_bw()
return(p)
}
cooksFunc <- function(model) {
p4<-ggplot(model, aes(seq_along(.cooksd), .cooksd))+geom_bar(stat="identity", position="identity", aes(fill = "#E58601"), show.legend = F)
p4<-p4+xlab("Obs. Number")+ylab("Cook's distance")
p4<-p4+ggtitle("Cook's distance")+theme_bw()
return(p4)
}
residFunc <- function(model) {
p1<-ggplot(linModel, aes(.fitted, .resid)) +
geom_jitter(position = position_jitter(width = 0.08, height = 0.5), aes(col = factor(.fitted)), size = 2, alpha = .5, show.legend = F)
p1 <- p1 + scale_color_manual(values = wes_palette("FantasticFox1"))
p1<-p1+geom_hline(yintercept=0, col="darkslategrey", linetype="dashed")
p1<-p1+xlab("Fitted values")+ylab("Residuals")
p1<-p1+ggtitle("Residual vs Fitted Plot")+theme_bw()
}
BoxPlotFunc <- function( expData, treatment, response, ExpName, yLabel ) {
prelimGraph <- ggplot( data = expData, aes( x = factor(treatment, levels = levelOrder), y = response) ) +
geom_jitter(width = .02, aes(col = factor(treatment)), size = 2, alpha = .5, show.legend = F) +
geom_boxplot( aes( col = factor(treatment)),
show.legend = F,
fill = NA,
outlier.color = "Black",
outlier.shape = 1,
outlier.size = 1.5) +
scale_color_manual(values = wes_palette("FantasticFox1")) +
labs(title= ExpName,
x= "Treatment Category",
y= yLabel,
caption = "- (o) indicates outlier data point") +
theme_bw()
return(prelimGraph)
}
myPlots <- function(model, expData, treatment, response, ExpLabel, respLabel, Exper ) {
p1 <- residFunc(model)
p2 <- BoxPlotFunc( expData, treatment, response, ExpLabel, respLabel )
p3 <- qqFunc(model)
p4 <- cooksFunc(model)
gridPlot <- grid.arrange(p2, p1, p3, p4, nrow = 2, top = Exper)
return(gridPlot)
}
myPlots(linModel, resourceDat, resourceDat$treatmentCat, resourceDat$focalFlowerHeight_cm, "Flower Height By Treatment", "Focal Flower Height (cm)", "Resource Experiment: Focal Flower Height")
UpperClassAccessValue<-.9
LowerClassAccessValue<-.2
UpperClassAttitude<-.1
LowerClassAttitude<-.3
WaterSource<-"Improved"
AccessStatus<-if(WaterSource=="Improved"){
print("Access to Water Improved")
}else if(WaterSource=="Damaged"){
print("Access to Water Cut Off")
}else{
print("No Change")
}
ClassResponse<-if(AccessStatus=="Access to Water Improved"){
print("Both Class's Access Grows")
}else if (AccessStatus=="Access to Water Cut Off") {
print("Both Class's Access Decreases")
} else{
print("No Change")
}
NarrativeResponse<-if(ClassResponse=="Both Class's Access Decreases"&LowerClassAccessValue<.5& UpperClassAccessValue>.5&UpperClassAttitude<.5){
print("Initialize Capitalization")
} else if (ClassResponse=="Both Class's Access Decreases"&UpperClassAttitude>.5){
print("Upper Class Helps Lower Class")
}else{
print("No Change")
}
ProgramEnd<-if(NarrativeResponse=="Initialize Capitalization"){
print("Trigger Capitalization Narrative")
}else if(NarrativeResponse=="Upper Class Helps Lower Class"){
print("Trigger Problem Solve Narrative")
}else{
print("No Change")
}
library(tidyverse)
library(ggplot2)
library(wesanderson)
library("grid")
library("gridExtra")
library(lme4)
library(rstanarm)
#Setting Working Directory
setwd("/Users/jacksonanderson/Desktop/EBIO4420/CompBioLabsAndHomework/Labs/Assignment 8/Data")
#Reading data in as a tibble
transDat <- read_csv("TransplantBaeleDataCSV.csv")
View(transDat)
? >%>
