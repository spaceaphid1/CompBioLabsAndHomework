for( t in seq(2, totalGenerations)) {
initPrey[t] <- initPrey[t-1] + (r * initPrey[t-1]) - (a * initPrey[t-1] * initPred[t-1])
initPred[t] <- initPred[t-1] + (k * a * initPrey[t-1] * initPred[t-1]) - (m * initPred[t-1])
n[t] <- initPrey[t]
p[t] <- initPred[t]
# if (is.nan(n[t])) {
#   n[t] <- 0
# }
# if (n[t] < 0) {
#   n[t] <- 0
# }
# if (is.nan(p[t])) {
#   p[t] <- 0
# }
# if (p[t] < 0) {
#   p[t] <- 0
# }
}
n
totalGenerations <- 1000
initPrey <- 100 	# initial prey abundance at time t = 1
initPred <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1
timeVec <- seq(1, totalGenerations)
n <- rep(0, totalGenerations)
p <- rep(0, totalGenerations)
initPrey[1]
initPrey[2]
initPrey
n <- rep(0, totalGenerations)
n[1] <- initPrey
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
for( t in seq(2, totalGenerations)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
# initPred[t] <- initPred[t-1] + (k * a * initPrey[t-1] * initPred[t-1]) - (m * initPred[t-1])
# p[t] <- initPred[t]
# if (is.nan(n[t])) {
#   n[t] <- 0
# }
# if (n[t] < 0) {
#   n[t] <- 0
# }
# if (is.nan(p[t])) {
#   p[t] <- 0
# }
# if (p[t] < 0) {
#   p[t] <- 0
# }
}
n
p[1] <- initPred
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
for( t in seq(2, totalGenerations)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
# p[t] <- initPred[t]
# if (is.nan(n[t])) {
#   n[t] <- 0
# }
# if (n[t] < 0) {
#   n[t] <- 0
# }
# if (is.nan(p[t])) {
#   p[t] <- 0
# }
# if (p[t] < 0) {
#   p[t] <- 0
# }
}
p
totalGenerations <- 1000
initPrey <- 100 	# initial prey abundance at time t = 1
initPred <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1
timeVec <- seq(1, totalGenerations)
n <- rep(0, totalGenerations)
p <- rep(0, totalGenerations)
n[1] <- initPrey
p[1] <- initPred
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
for( t in seq(2, totalGenerations)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
# p[t] <- initPred[t]
# if (is.nan(n[t])) {
#   n[t] <- 0
# }
# if (n[t] < 0) {
#   n[t] <- 0
# }
# if (is.nan(p[t])) {
#   p[t] <- 0
# }
# if (p[t] < 0) {
#   p[t] <- 0
# }
}
p
totalGenerations <- 1000
initPrey <- 100 	# initial prey abundance at time t = 1
initPred <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1 		# conversion constant of prey into predators
timeVec <- seq(1, totalGenerations)
n <- rep(0, totalGenerations)
p <- rep(0, totalGenerations)
n[1] <- initPrey
p[1] <- initPred
for( t in seq(2, totalGenerations)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
# p[t] <- initPred[t]
# if (is.nan(n[t])) {
#   n[t] <- 0
# }
# if (n[t] < 0) {
#   n[t] <- 0
# }
# if (is.nan(p[t])) {
#   p[t] <- 0
# }
# if (p[t] < 0) {
#   p[t] <- 0
# }
}
n
p
plot(timeVec, n, ylim = c(0, 1000), xlim = c(0,1000))
lines(timeVec, p)
plot(timeVec, n)
lines(timeVec, p)
n
totalGenerations <- 1000
initPrey <- 100 	# initial prey abundance at time t = 1
initPred <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1 		# conversion constant of prey into predators
timeVec <- seq(1, totalGenerations)
n <- rep(0, totalGenerations)
p <- rep(0, totalGenerations)
n[1] <- initPrey
p[1] <- initPred
for( t in seq(2, totalGenerations)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
# p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
# p[t] <- initPred[t]
# if (is.nan(n[t])) {
#   n[t] <- 0
# }
# if (n[t] < 0) {
#   n[t] <- 0
# }
# if (is.nan(p[t])) {
#   p[t] <- 0
# }
# if (p[t] < 0) {
#   p[t] <- 0
# }
}
n
totalGenerations <- 1000
initPrey <- 100 	# initial prey abundance at time t = 1
initPred <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1 		# conversion constant of prey into predators
timeVec <- seq(1, totalGenerations)
n <- rep(0, totalGenerations)
p <- rep(0, totalGenerations)
n[1] <- initPrey
p[1] <- initPred
for( t in seq(2, totalGenerations)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
# p[t] <- initPred[t]
# if (is.nan(n[t])) {
#   n[t] <- 0
# }
# if (n[t] < 0) {
#   n[t] <- 0
# }
# if (is.nan(p[t])) {
#   p[t] <- 0
# }
# if (p[t] < 0) {
#   p[t] <- 0
# }
}
n
totalGenerations <- 1000
initPrey <- 100 	# initial prey abundance at time t = 1
initPred <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1 		# conversion constant of prey into predators
timeVec <- seq(1, totalGenerations)
n <- rep(0, totalGenerations)
p <- rep(0, totalGenerations)
n[1] <- initPrey
p[1] <- initPred
for( t in seq(2, totalGenerations)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
# p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
# p[t] <- initPred[t]
# if (is.nan(n[t])) {
#   n[t] <- 0
# }
# if (n[t] < 0) {
#   n[t] <- 0
# }
# if (is.nan(p[t])) {
#   p[t] <- 0
# }
# if (p[t] < 0) {
#   p[t] <- 0
# }
}
n
plot(timeVec, n)
n
for( t in seq(2, totalGenerations)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
# if (is.nan(n[t])) {
#   n[t] <- 0
# }
# if (n[t] < 0) {
#   n[t] <- 0
# }
# if (is.nan(p[t])) {
#   p[t] <- 0
# }
# if (p[t] < 0) {
#   p[t] <- 0
# }
}
n
for( t in seq(2, totalGenerations)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if (is.nan(n[t])) {
n[t] <- 0
} else if ( n[t] < 0 ) {
n[t] <- 0
}
}
n
for( t in seq(2, totalGenerations)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
# if (is.nan(n[t])) {
#   n[t] <- 0
# } else if ( n[t] < 0 ) {
#   n[t] <- 0
# }
}
n
for( t in seq(2, totalGenerations)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if (is.nan(n[t])) {
n[t] <- 0
} else if ( n[t] < 0 ) {
n[t] <- 0
}
}
n
for( t in seq(2, totalGenerations)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
}
for( t in seq(2, totalGenerations)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if (is.nan(n[t])) {
n[t] <- 0
} else if ( n[t] < 0 ) {
n[t] <- 0
}
if (is.nan(p[t])) {
p[t] <- 0
} else if ( p[t] < 0 ) {
p[t] <- 0
}
}
p
n
totalGenerations <- 1000
initPrey <- 100 	# initial prey abundance at time t = 1
initPred <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1 		# conversion constant of prey into predators
timeVec <- seq(1, totalGenerations)
n <- rep(0, totalGenerations)
p <- rep(0, totalGenerations)
n[1] <- initPrey
p[1] <- initPred
for( t in seq(2, totalGenerations)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if (is.nan(n[t])) {
n[t] <- 0
} else if ( n[t] < 0 ) {
n[t] <- 0
}
if (is.nan(p[t])) {
p[t] <- 0
} else if ( p[t] < 0 ) {
p[t] <- 0
}
}
p
n
plot(timeVec, n)
lines(timeVec, p)
library(ggplot2)
library(dplyr)
library(tidymv)
library(mgcv)
library(wesanderson)
library(Hmisc)
library(RColorBrewer)
library(ggsignif)
fullDat <- read.csv("/Users/jacksonanderson/Desktop/Dispersal Plasticity/Jackson_s work/Data/Dispersal Master Sheet.csv")
fullDat$focalPlantMass_g <- fullDat$phyllaryCount/fullDat$diskSeedAverage
fullDatClean <- na.omit(fullDat)
fullDatClean$focalPlantMass_g <- fullDatClean$phyllaryCount / fullDatClean$diskSeedAverage
shadeDat <- subset( fullDatClean, experiment == "shade")
compDat <- subset( fullDatClean, experiment == "competition")
resourceDat <- subset( fullDatClean, experiment == "resources")
shadeGraph2 <- ggplot(shadeDat, aes( treatment, focalPlantMass_g))
shadeGraph2 + geom_violin( aes(col = factor(treatment), alpha = .02), show.legend = F) +
scale_color_manual(values = wes_palette( "FantasticFox1")) +
geom_jitter( aes(col= factor(treatment)), shape=16, size = .85, position=position_jitter(0.02), show.legend = F) +
stat_summary(fun.y=median, geom="point", size=2, color="darkmagenta", shape = 3) +
theme( text = element_text(size = 12)) +
labs(title="Shade Experiment",
subtitle="Treatments of Varying Shade Levels and Focal Plant Mass (g)",
x="Treatment",
y="Focal Plant Mass (g)",
caption = " - Treatment colors/type represent variation on how light was filtered before coming in contact with the plant
- (+) indicates mean value") +
theme_minimal()
shadeHeightAnova <- aov(lm(focalPlantHeight_cm ~ treatment, data = shadeDat))
shadeDat
shadeHeightAnova <- aov(lm(focalFlowerHeight_cm ~ treatment, data = shadeDat))
summary(shadeHeightAnova)
TukeyHSD(shadeHeightAnova)
View(shadeDat)
fullDatClean$focalPlantMass_g <- fullDatClean$phyllaryCount / fullDatClean$diskSeedAverage
shadeDat <- subset( fullDatClean, experiment == "shade")
compDat <- subset( fullDatClean, experiment == "competition")
resourceDat <- subset( fullDatClean, experiment == "resources")
fullDat <- read.csv("/Users/jacksonanderson/Desktop/Dispersal Plasticity/Jackson_s work/Data/Dispersal Master Sheet.csv")
fullDatClean <- na.omit(fullDat)
fullDat$rayToDisk <- fullDat$phyllaryCount/fullDat$diskSeedAverage
shadeDat <- subset( fullDatClean, experiment == "shade")
compDat <- subset( fullDatClean, experiment == "competition")
resourceDat <- subset( fullDatClean, experiment == "resources")
fullDat <- read.csv("/Users/jacksonanderson/Desktop/Dispersal Plasticity/Jackson_s work/Data/Dispersal Master Sheet.csv")
fullDatClean <- na.omit(fullDat)
fullDatClean$rayToDisk <- fullDatClean$phyllaryCount/fullDatClean$diskSeedAverage
shadeDat <- subset( fullDatClean, experiment == "shade")
compDat <- subset( fullDatClean, experiment == "competition")
resourceDat <- subset( fullDatClean, experiment == "resources")
shadeHeightAnova <- aov(lm(focalFlowerHeight_cm ~ treatment, data = shadeDat))
summary(shadeHeightAnova)
TukeyHSD(shadeHeightAnova)
shadeRatioAnova <- aov(lm(rayToDisk ~ treatment, data = shadeDat))
summary(shadeRatioAnova)
TukeyHSD(shadeRatioAnova)
totalGenerations <- 1000
initPrey <- 100 	# initial prey abundance at time t = 1
initPred <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1
timeVec <- seq(1, totalGenerations)
n <- rep(0, totalGenerations)
p <- rep(0, totalGenerations)
n[1] <- initPrey
p[1] <- initPred
for( t in seq(2, totalGenerations)) {
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
if (is.nan(n[t])) {
n[t] <- 0
} else if ( n[t] < 0 ) {
n[t] <- 0
}
if (is.nan(p[t])) {
p[t] <- 0
} else if ( p[t] < 0 ) {
p[t] <- 0
}
}
n
p
plot(timeVec, n)
plot(timeVec, n, lty = 1)
plot(timeVec, n, lty = 1)
plot(timeVec, n, lty = 2)
plot(timeVec, n, lty = 4)
?plot
plot(timeVec, n, type = l )
plot(timeVec, n, type = "l" )
lines(timeVec, p, type = "l")
plot(timeVec, n, type = "l", color = "red", ylab = "Population Abundance" , xlab = "Generations")
plot(timeVec, n, type = "l", color = "red", ylab = "Population Abundance" , xlab = "Generations")
plot(timeVec, n, type = "l", col = "red", ylab = "Population Abundance" , xlab = "Generations")
plot(timeVec, n, type = "l", col = "red", ylab = "Population Abundance" , xlab = "Generations")
lines(timeVec, p, type = "l", col = "blue")
plot(timeVec, n, type = "l", col = "red", ylab = "Population Abundance" , xlab = "Generations", main = "Population Abundances Over Generations for Predators and Prey")
lines(timeVec, p, type = "l", col = "blue")
legend(topleft)
legend("topright", c("Predators", "Pred"))
legend("topright", c("Predators", "Prey"), col = c("blue", "red"))
legend("topright", c("Predators", "Prey"), lty = 1, col = c("blue", "red"))
myResults <- data.frame("TimeStep" = timeVec, "PreyAbundance" = n, "PredatorAbundance" = p)
myResults
setwd("/Users/jacksonanderson/Desktop/EBIO4420/CompBioLabsAndHomework/Labs/Lab05")
write.csv( x = myResults, file = "PredPreyResults.csv")
TukeyHSD(shadeRatioAnova)
shadeGraph2 <- ggplot(shadeDat, aes( treatment, focalPlantMass_g))
shadeGraph2 + geom_violin( aes(col = factor(treatment), alpha = .02), show.legend = F) +
scale_color_manual(values = wes_palette( "FantasticFox1")) +
geom_jitter( aes(col= factor(treatment)), shape=16, size = .85, position=position_jitter(0.02), show.legend = F) +
stat_summary(fun.y=median, geom="point", size=2, color="darkmagenta", shape = 3) +
theme( text = element_text(size = 12)) +
labs(title="Shade Experiment",
subtitle="Treatments of Varying Shade Levels and Focal Plant Mass (g)",
x="Treatment",
y="Focal Plant Mass (g)",
caption = " - Treatment colors/type represent variation on how light was filtered before coming in contact with the plant
- (+) indicates mean value") +
theme_minimal()
legend("topright", c("test1", "test2"))
shadeGraph2 <- ggplot(shadeDat, aes( treatment, focalPlantMass_g))
shadeGraph2 + geom_violin( aes(col = factor(treatment), alpha = .02), show.legend = F) +
scale_color_manual(values = wes_palette( "FantasticFox1")) +
geom_jitter( aes(col= factor(treatment)), shape=16, size = .85, position=position_jitter(0.02), show.legend = F) +
stat_summary(fun.y=median, geom="point", size=2, color="darkmagenta", shape = 3) +
theme( text = element_text(size = 12)) +
labs(title="Shade Experiment",
subtitle="Treatments of Varying Shade Levels and Focal Plant Mass (g)",
x="Treatment",
y="Focal Plant Mass (g)",
caption = " - Treatment colors/type represent variation on how light was filtered before coming in contact with the plant
- (+) indicates mean value") +
theme_minimal() +
legend("topright", c("test1", "test2"))
shadeGraph2 <- ggplot(shadeDat, aes( treatment, focalPlantMass_g))
shadeGraph2 + geom_violin( aes(col = factor(treatment), alpha = .02), show.legend = F) +
scale_color_manual(values = wes_palette( "FantasticFox1")) +
geom_jitter( aes(col= factor(treatment)), shape=16, size = .85, position=position_jitter(0.02), show.legend = F) +
stat_summary(fun.y=median, geom="point", size=2, color="darkmagenta", shape = 1) +
theme( text = element_text(size = 12)) +
labs(title="Shade Experiment",
subtitle="Treatments of Varying Shade Levels and Focal Plant Mass (g)",
x="Treatment",
y="Focal Plant Mass (g)",
caption = " - Treatment colors/type represent variation on how light was filtered before coming in contact with the plant
- (+) indicates mean value") +
theme_minimal()
shadeGraph2 <- ggplot(shadeDat, aes( treatment, focalPlantMass_g))
shadeGraph2 + geom_violin( aes(col = factor(treatment), alpha = .02), show.legend = F) +
scale_color_manual(values = wes_palette( "FantasticFox1")) +
geom_jitter( aes(col= factor(treatment)), shape=16, size = .85, position=position_jitter(0.02), show.legend = F) +
stat_summary(fun.y=median, geom="point", size=2, color="darkmagenta", shape = 1) +
theme( text = element_text(size = 12)) +
labs(title="Shade Experiment",
subtitle="Treatments of Varying Shade Levels and Focal Plant Mass (g)",
x="Treatment",
y="Focal Plant Mass (g)",
caption = " - Treatment colors/type represent variation on how light was filtered before coming in contact with the plant
- (o) indicates mean value") +
theme_minimal()
dat <- read.csv("/Users/jacksonanderson/Desktop/EBIO4420/compBioSandbox/CompBio_on_git/Labs/Lab05/ExampleData.csv")
str(dat)
str(dat)
vecDat <- dat$x
str(vecDat)
compHeightAnova <- aov(lm(focalFlowerHeight_cm ~ treatment, data = compDat))
summary(compHeightAnova)
TukeyHSD(compHeightAnova)
compRatioAnova <- aov(lm(compDat$rayToDisk ~ treatment, data = compDat))
summary(compRatioAnova)
TukeyHSD(compRatioAnova)
stressHeightAnova <- aov(lm(focalFlowerHeight_cm ~ treatment, data = resourceDat))
summary(compHeightAnova)
TukeyHSD(compHeightAnova)
stressHeightAnova <- aov(lm(focalFlowerHeight_cm ~ treatment, data = resourceDat))
summary(stressHeightAnova)
TukeyHSD(stressHeightAnova)
stressRatioAnova <- aov(lm(resourceDat$rayToDisk ~ treatment, data = resourceDat))
summary(stressRatioAnova)
TukeyHSD(stressRatioAnova)
